name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Weekly validation of real-world healthcare sites
    - cron: '0 0 * * 0'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 2.1.3
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      run: poetry install --no-interaction --no-ansi
    
    - name: Install Playwright browsers
      run: poetry run playwright install chromium
    
    - name: Run tests with coverage
      run: poetry run pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Run linter
      run: poetry run ruff check src/
    
    - name: Run type checker
      run: poetry run mypy src/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
        verbose: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/python
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 2.1.3
    
    - name: Check for vulnerable dependencies
      run: |
        poetry export -f requirements.txt --without-hashes > requirements.txt
        pip install pip-audit
        pip-audit -r requirements.txt

  performance:
    name: Performance Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 2.1.3
    
    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-ansi
        poetry run playwright install chromium
    
    - name: Run performance benchmark
      run: |
        # Test single scan completes in under 10 seconds
        echo "import time" > perf_test.py
        echo "import subprocess" >> perf_test.py
        echo "start = time.time()" >> perf_test.py
        echo "result = subprocess.run(['poetry', 'run', 'pixel-detector', 'scan', 'example.com'], capture_output=True)" >> perf_test.py
        echo "duration = time.time() - start" >> perf_test.py
        echo "print(f'Scan took {duration:.2f} seconds')" >> perf_test.py
        echo "assert duration < 10, f'Performance regression: {duration:.2f}s > 10s'" >> perf_test.py
        python perf_test.py

  real-world-validation:
    name: Real-World Site Validation
    runs-on: ubuntu-latest
    # Only run on schedule or manual trigger
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 2.1.3
    
    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-ansi
        poetry run playwright install chromium
    
    - name: Validate known healthcare sites
      run: |
        # Test that Mount Sinai still has Google Analytics
        poetry run pixel-detector scan mountsinai.org -o mountsinai.json
        python -c "import json; data=json.load(open('mountsinai.json')); assert len(data['pixels_detected']) > 0, 'Mount Sinai detection failed'"
        
        # Test that NYU Langone is still clean
        poetry run pixel-detector scan nyulangone.org -o nyu.json
        python -c "import json; data=json.load(open('nyu.json')); assert len(data['pixels_detected']) == 0, 'NYU should be clean'"